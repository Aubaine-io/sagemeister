{% extends 'base.html.twig' %}
{% block title %}New Ability Type{% endblock %}

{% block body %}
{{ form_start(form) }}
    <div class="flex flex-col gap-3 justify-center items-center">
        <div class="w-2/6 px-8 py-6 flex flex-col gap-3 border-2 rounded border-primary border-box justify-center items-center">
            <div class="w-full flex justify-between items-center">
                {{ form_label(form.name, null, {'label_attr': {'class': ''}}) }}
                {{ form_widget(form.name, {
                    'attr': {
                        'class': 'w-80 input input-primary input-bordered max-w-xs'
                    }})
                }}
            </div>
            <div class="w-full flex justify-between items-center">
                <div class="flex gap-1 justify-center items-center">
                    {{ form_label(form.icon) }}
                    <div class="dropdown dropdown-hover dropdown-end">
                        <div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
                            <svg
                            tabindex="0"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            class="h-4 w-4 stroke-current">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <div
                            tabindex="0"
                            class="card bg-base-300 dropdown-content rounded-box z-[1] w-96 shadow">
                            <div tabindex="0" class="card-body">
                                <p>
                                    Icon's render tag can be found at
                                    <a class="text-primary" target="_blank" href="https://ux.symfony.com/icons">Symfony Icons</a>
                                    .
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            <select name="{{ field_name(form.icon) }}" class="form-control">
                {% for label, value in field_choices(form.icon) %}
                    <option style='background-image: url("data:image/svg+xml,{{ ux_icon(label) | base64_encode}}")' id="icon-option" value="{{ label }}">
                            {{ label }}
                    </option>
                {% endfor %}
            </select>
            </div>
            <div class="w-full flex justify-between items-center">
                {{ form_label(form.color) }}
                {{ form_widget(form.color, {
                    'attr': {
                        'class': 'w-80 input input-primary input-bordered max-w-xs',
                        'data-coloris': 'data-coloris'
                    }})
                }}
            </div>
            <div class="w-full flex justify-center items-center">
                {{ form_row(form.save, {
                    'attr': {
                        'class': 'my-2 w-44 btn btn-primary max-w-xs'
                    }})
                }}
            </div>
        </div>
    </div>
{{ form_end(form)}}
{% endblock %}

{% block javascripts %}
<script>
    Coloris({
        // A custom selector to bind the color picker to. This must point to HTML input fields.
        el: '#ability_type_color',

        // The bound input fields are wrapped in a div that adds a thumbnail showing the current color
        // and a button to open the color picker (for accessibility only). If you wish to keep your
        // fields unaltered, set this to false, in which case you will lose the color thumbnail and
        // the accessible button (not recommended).
        // Note: This only works if you specify a custom selector to bind the picker (option above),
        // it doesn't work on the default [data-coloris] attribute selector.
        wrap: false,

        // Set to true to activate basic right-to-left support.
        rtl: false,

        // Available themes: default, large, polaroid, pill (horizontal).
        // More themes might be added in the future.
        theme: 'large',

        // Set the theme to light or dark mode:
        // * light: light mode (default).
        // * dark: dark mode.
        // * auto: automatically enables dark mode when the user prefers a dark color scheme.
        themeMode: 'auto',

        // The margin in pixels between the input fields and the color picker's dialog.
        margin: 0,

        // Set the preferred color string format:
        // * hex: outputs #RRGGBB or #RRGGBBAA (default).
        // * rgb: outputs rgb(R, G, B) or rgba(R, G, B, A).
        // * hsl: outputs hsl(H, S, L) or hsla(H, S, L, A).
        // * auto: guesses the format from the active input field. Defaults to hex if it fails.
        // * mixed: outputs #RRGGBB when alpha is 1; otherwise rgba(R, G, B, A).
        format: 'hex',

        // Set to true to enable format toggle buttons in the color picker dialog.
        // This will also force the format option (above) to auto.
        formatToggle: false,

        // Enable or disable alpha support.
        // When disabled, it will strip the alpha value from the existing color string in all formats.
        alpha: false,

        // Set to true to always include the alpha value in the color value even if the opacity is 100%.
        forceAlpha: false,

        // Set to true to hide all the color picker widgets (spectrum, hue, ...) except the swatches.
        swatchesOnly: false,

        // Focus the color value input when the color picker dialog is opened.
        focusInput: true,

        // Select and focus the color value input when the color picker dialog is opened.
        selectInput: false,

        // Show an optional clear button
        clearButton: false,

        // Set the label of the clear button
        clearLabel: 'Clear',

        // Show an optional close button
        closeButton: false,

        // Set the label of the close button
        closeLabel: 'Close',

        // Set to true to use the color picker as an inline widget. In this mode the color picker is
        // always visible and positioned statically within its container, which is by default the body
        // of the document. Use the "parent" option to set a custom container.
        // Note: In this mode, the best way to get the picked color, is listening to the "coloris:pick"
        // event and reading the value from the event detail (See example in the Events section). The
        // other way is to read the value of the input field with the id "clr-color-value".
        inline: false,

        // In inline mode, this is the default color that is set when the picker is initialized.
        defaultColor: '#000000',

        // A function that is called whenever a new color is picked. This defaults to an empty function,
        // but can be set to a custom one. The selected color is passed to the function as an argument.
        // Use in instances (described below) to perform a custom action for each instance. 
        onChange: (color) => {
            const colorInput = document.querySelector("input[id='ability_type_color']");

            if (colorInput) {
                colorInput.style.background = color;
            }
        }
    });

    document.addEventListener("DOMContentLoaded", () => {
        const colorisButton = document.querySelector("button[aria-labelledby='clr-open-label']");
        if (colorisButton) {
            colorisButton.style.display = "none";
        }

        const colorisPicker = document.querySelector("div[id='clr-picker']");
        if (colorisPicker) {
            colorisPicker.classList.add("mt-4");
        }

        const colorisField = document.querySelector(".clr-field");
        if (colorisField) {
            const defaultColor = colorisField.style.color;
            const colorInput = document.querySelector("input[id='ability_type_color']");

            if (colorInput) {
                colorInput.style.background = defaultColor;
            }
        }
    });
</script>
{% endblock %}