version: '3.8'

services:
  db:
    image: mysql:8.4 # Latest secure version of MySQL
    container_name: mysql
    restart: unless-stopped # Automatically restart the container unless it is stopped manually
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes' # Generate a random root password
      MYSQL_DATABASE: ${MYSQL_DATABASE} # Name of the database to create, sourced from .env file
      MYSQL_USER: ${MYSQL_USER} # Database user, sourced from .env file
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # Password for the database user, sourced from .env file
    volumes:
      - db_data:/var/lib/mysql # Persist database data in a Docker volume
    networks:
      - backend
    ports:
      - 3306:3306 # Expose MySQL port to the host for external access
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 5s # Interval between health checks
      timeout: 10s # Time to wait for a response
      retries: 3 # Number of retries before considering the service unhealthy

  adminer:
    image: adminer:latest # Latest secure version of Adminer
    container_name: adminer
    restart: unless-stopped # Automatically restart the container unless it is stopped manually
    ports:
      - 8080:8080 # Expose Adminer web interface on port 8080
    environment:
      ADMINER_DEFAULT_SERVER: db # Set the default server to connect to MySQL
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy # Wait for the database service to be healthy before starting Adminer
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 5s # Interval between health checks
      timeout: 10s # Time to wait for a response
      retries: 3 # Number of retries before considering the service unhealthy

# Define a Docker network for internal communication between services
networks:
  backend:
    driver: bridge

# Define a Docker volume for persisting database data
volumes:
  db_data:
    driver: local
